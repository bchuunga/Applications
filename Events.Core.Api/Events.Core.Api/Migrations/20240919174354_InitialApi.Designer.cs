// <auto-generated />
using System;
using Events.Core.Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.Core.Api.Migrations
{
    [DbContext(typeof(MeetupContext))]
    [Migration("20240919174354_InitialApi")]
    partial class InitialApi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Events.Core.Api.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("MeetupId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId");

                    b.ToTable("Lectures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "James",
                            Description = "Coding with Visual Studio and C#",
                            MeetupId = 1,
                            Topic = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Ben C",
                            Description = "Building algorithms with AI and C#",
                            MeetupId = 1,
                            Topic = "Algorithms"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Peter",
                            Description = "Creating data mats in open source environments",
                            MeetupId = 2,
                            Topic = "SSRS with Python"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Lisa",
                            Description = "Camping site tips for Florida vacationers",
                            MeetupId = 3,
                            Topic = "Camping"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Laura",
                            Description = "Guide to Napa Valley wine tours.",
                            MeetupId = 4,
                            Topic = "Napa Valley wines"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Scott",
                            Description = "What is a good wine? Learn how to test and grade wines.",
                            MeetupId = 4,
                            Topic = "Wine fundamentals"
                        });
                });

            modelBuilder.Entity("Events.Core.Api.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MeetupId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Tampa",
                            MeetupId = 1,
                            PostCode = "33547",
                            Street = "2547 Nature Walk Drive"
                        },
                        new
                        {
                            Id = 2,
                            City = "Orlando",
                            MeetupId = 2,
                            PostCode = "44547",
                            Street = "1500 International Drive"
                        },
                        new
                        {
                            Id = 3,
                            City = "Atlanta",
                            MeetupId = 3,
                            PostCode = "75549",
                            Street = "235 Presidents Drive"
                        },
                        new
                        {
                            Id = 4,
                            City = "Clearwater",
                            MeetupId = 4,
                            PostCode = "33500",
                            Street = "205 Tampa Drive"
                        });
                });

            modelBuilder.Entity("Events.Core.Api.Models.Meetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Meetups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = new Guid("0b1b9bc2-4e6d-4096-8295-29e91ce47fce"),
                            Date = new DateTime(2024, 9, 29, 13, 43, 54, 275, DateTimeKind.Local).AddTicks(5477),
                            IsPrivate = true,
                            Name = "Dot Net Users",
                            Organizer = "Microsoft"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = new Guid("0b1b9bc2-4e6d-4096-8295-29e91ce47fce"),
                            Date = new DateTime(2024, 9, 20, 13, 43, 54, 275, DateTimeKind.Local).AddTicks(5540),
                            IsPrivate = true,
                            Name = "SQL Users",
                            Organizer = "Microsoft"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = new Guid("0b1b9bc2-4e6d-4096-8295-29e91ce47fce"),
                            Date = new DateTime(2024, 10, 11, 13, 43, 54, 275, DateTimeKind.Local).AddTicks(5545),
                            IsPrivate = false,
                            Name = "Code Campers",
                            Organizer = "Code Campers"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = new Guid("0b1b9bc2-4e6d-4096-8295-29e91ce47fce"),
                            Date = new DateTime(2024, 12, 28, 13, 43, 54, 275, DateTimeKind.Local).AddTicks(5548),
                            IsPrivate = true,
                            Name = "Wine Lovers",
                            Organizer = "Napa Valley Wine Growers"
                        });
                });

            modelBuilder.Entity("Events.Core.Api.Models.Lecture", b =>
                {
                    b.HasOne("Events.Core.Api.Models.Meetup", "Meeting")
                        .WithMany("Lectures")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Events.Core.Api.Models.Location", b =>
                {
                    b.HasOne("Events.Core.Api.Models.Meetup", "Meeting")
                        .WithOne("Location")
                        .HasForeignKey("Events.Core.Api.Models.Location", "MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Events.Core.Api.Models.Meetup", b =>
                {
                    b.Navigation("Lectures");

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
